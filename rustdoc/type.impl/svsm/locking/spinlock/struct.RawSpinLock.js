(function() {
    var type_impls = Object.fromEntries([["svsm",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RawSpinLock%3CT,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/svsm/locking/spinlock.rs.html#99\">Source</a><a href=\"#impl-Debug-for-RawSpinLock%3CT,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"svsm/locking/spinlock/struct.RawSpinLock.html\" title=\"struct svsm::locking::spinlock::RawSpinLock\">RawSpinLock</a>&lt;T, I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/svsm/locking/spinlock.rs.html#99\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","svsm::locking::spinlock::SpinLock","svsm::locking::spinlock::SpinLockIrqSafe","svsm::locking::spinlock::SpinLockAnyTpr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-RawSpinLock%3CT,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/svsm/locking/spinlock.rs.html#99\">Source</a><a href=\"#impl-Default-for-RawSpinLock%3CT,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>, I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"svsm/locking/spinlock/struct.RawSpinLock.html\" title=\"struct svsm::locking::spinlock::RawSpinLock\">RawSpinLock</a>&lt;T, I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/svsm/locking/spinlock.rs.html#99\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"svsm/locking/spinlock/struct.RawSpinLock.html\" title=\"struct svsm::locking::spinlock::RawSpinLock\">RawSpinLock</a>&lt;T, I&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","svsm::locking::spinlock::SpinLock","svsm::locking::spinlock::SpinLockIrqSafe","svsm::locking::spinlock::SpinLockAnyTpr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RawSpinLock%3CT,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/svsm/locking/spinlock.rs.html#123-228\">Source</a><a href=\"#impl-RawSpinLock%3CT,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>, I: <a class=\"trait\" href=\"svsm/locking/common/trait.IrqLocking.html\" title=\"trait svsm::locking::common::IrqLocking\">IrqLocking</a>&gt; <a class=\"struct\" href=\"svsm/locking/spinlock/struct.RawSpinLock.html\" title=\"struct svsm::locking::spinlock::RawSpinLock\">RawSpinLock</a>&lt;T, I&gt;</h3><div class=\"docblock\"><p>A lock can only be formed if the type it protects is <code>Send</code>, since the\ncontents of the lock will be sent to different threads.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/svsm/locking/spinlock.rs.html#134-141\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"svsm/locking/spinlock/struct.RawSpinLock.html#tymethod.new\" class=\"fn\">new</a>(data: T) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new SpinLock instance with the specified initial data.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>svsm::locking::SpinLock;\n\n<span class=\"kw\">let </span>data = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>spin_lock = SpinLock::new(data);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lock\" class=\"method\"><a class=\"src rightside\" href=\"src/svsm/locking/spinlock.rs.html#158-176\">Source</a><h4 class=\"code-header\">pub fn <a href=\"svsm/locking/spinlock/struct.RawSpinLock.html#tymethod.lock\" class=\"fn\">lock</a>(&amp;self) -&gt; <a class=\"struct\" href=\"svsm/locking/spinlock/struct.RawLockGuard.html\" title=\"struct svsm::locking::spinlock::RawLockGuard\">RawLockGuard</a>&lt;'_, T, I&gt;</h4></section></summary><div class=\"docblock\"><p>Acquires the lock, providing access to the protected data.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>svsm::locking::SpinLock;\n\n<span class=\"kw\">let </span>spin_lock = SpinLock::new(<span class=\"number\">42</span>);\n\n<span class=\"comment\">// Acquire the lock and modify the protected data.\n</span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>guard = spin_lock.lock();\n    <span class=\"kw-2\">*</span>guard += <span class=\"number\">1</span>;\n}; <span class=\"comment\">// Lock is automatically released when `guard` goes out of scope.</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.locked_do\" class=\"method\"><a class=\"src rightside\" href=\"src/svsm/locking/spinlock.rs.html#193-196\">Source</a><h4 class=\"code-header\">pub fn <a href=\"svsm/locking/spinlock/struct.RawSpinLock.html#tymethod.locked_do\" class=\"fn\">locked_do</a>&lt;R, F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.reference.html\">&amp;mut T</a>) -&gt; R&gt;(&amp;self, f: F) -&gt; R</h4></section></summary><div class=\"docblock\"><p>Execute function F while holding the lock.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>svsm::locking::SpinLock;\n\n<span class=\"kw\">let </span>spin_lock = SpinLock::new(<span class=\"number\">42</span>);\n\n<span class=\"comment\">// Do some actions while holding the lock.\n// Lock is automatically taken and released.\n</span>spin_lock.locked_do(|s| {\n    <span class=\"kw-2\">*</span>s += <span class=\"number\">1</span>;\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_lock\" class=\"method\"><a class=\"src rightside\" href=\"src/svsm/locking/spinlock.rs.html#202-227\">Source</a><h4 class=\"code-header\">pub fn <a href=\"svsm/locking/spinlock/struct.RawSpinLock.html#tymethod.try_lock\" class=\"fn\">try_lock</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"svsm/locking/spinlock/struct.RawLockGuard.html\" title=\"struct svsm::locking::spinlock::RawLockGuard\">RawLockGuard</a>&lt;'_, T, I&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>This method tries to acquire the lock without blocking. If the\nlock is not available, it returns <code>None</code>. If the lock is\nsuccessfully acquired, it returns a <a href=\"svsm/locking/spinlock/type.LockGuard.html\" title=\"type svsm::locking::spinlock::LockGuard\"><code>LockGuard</code></a> that automatically\nreleases the lock when it goes out of scope.</p>\n</div></details></div></details>",0,"svsm::locking::spinlock::SpinLock","svsm::locking::spinlock::SpinLockIrqSafe","svsm::locking::spinlock::SpinLockAnyTpr"],["<section id=\"impl-Send-for-RawSpinLock%3CT,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/svsm/locking/spinlock.rs.html#117\">Source</a><a href=\"#impl-Send-for-RawSpinLock%3CT,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"svsm/locking/spinlock/struct.RawSpinLock.html\" title=\"struct svsm::locking::spinlock::RawSpinLock\">RawSpinLock</a>&lt;T, I&gt;</h3></section>","Send","svsm::locking::spinlock::SpinLock","svsm::locking::spinlock::SpinLockIrqSafe","svsm::locking::spinlock::SpinLockAnyTpr"],["<section id=\"impl-Sync-for-RawSpinLock%3CT,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/svsm/locking/spinlock.rs.html#119\">Source</a><a href=\"#impl-Sync-for-RawSpinLock%3CT,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"svsm/locking/spinlock/struct.RawSpinLock.html\" title=\"struct svsm::locking::spinlock::RawSpinLock\">RawSpinLock</a>&lt;T, I&gt;</h3></section>","Sync","svsm::locking::spinlock::SpinLock","svsm::locking::spinlock::SpinLockIrqSafe","svsm::locking::spinlock::SpinLockAnyTpr"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[10968]}