(function() {
    var type_impls = Object.fromEntries([["svsm",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RawRWLock%3CT,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/svsm/locking/rwlock.rs.html#93\">Source</a><a href=\"#impl-Debug-for-RawRWLock%3CT,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"svsm/locking/rwlock/struct.RawRWLock.html\" title=\"struct svsm::locking::rwlock::RawRWLock\">RawRWLock</a>&lt;T, I&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/svsm/locking/rwlock.rs.html#93\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","svsm::locking::rwlock::RWLock","svsm::locking::rwlock::RWLockIrqSafe","svsm::locking::rwlock::RWLockAnyTpr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RawRWLock%3CT,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/svsm/locking/rwlock.rs.html#149-258\">Source</a><a href=\"#impl-RawRWLock%3CT,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>, I: <a class=\"trait\" href=\"svsm/locking/common/trait.IrqLocking.html\" title=\"trait svsm::locking::common::IrqLocking\">IrqLocking</a>&gt; <a class=\"struct\" href=\"svsm/locking/rwlock/struct.RawRWLock.html\" title=\"struct svsm::locking::rwlock::RawRWLock\">RawRWLock</a>&lt;T, I&gt;</h3><div class=\"docblock\"><p>A reader-writer lock that allows multiple readers or a single writer\nto access the protected data. <a href=\"svsm/locking/rwlock/type.RWLock.html\" title=\"type svsm::locking::rwlock::RWLock\"><code>RWLock</code></a> provides exclusive access for\nwriters and shared access for readers, for efficient synchronization.</p>\n</div></section></summary><div class=\"docblock\"><p>A lock can only be formed if the type it protects is <code>Send</code>, since the\ncontents of the lock will be sent to different threads.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/svsm/locking/rwlock.rs.html#173-179\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"svsm/locking/rwlock/struct.RawRWLock.html#tymethod.new\" class=\"fn\">new</a>(data: T) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new <a href=\"svsm/locking/rwlock/type.RWLock.html\" title=\"type svsm::locking::rwlock::RWLock\"><code>RWLock</code></a> instance with the provided initial data.</p>\n<h5 id=\"parameters\"><a class=\"doc-anchor\" href=\"#parameters\">§</a>Parameters</h5>\n<ul>\n<li><code>data</code>: The initial data to be protected by the <a href=\"svsm/locking/rwlock/type.RWLock.html\" title=\"type svsm::locking::rwlock::RWLock\"><code>RWLock</code></a>.</li>\n</ul>\n<h5 id=\"returns\"><a class=\"doc-anchor\" href=\"#returns\">§</a>Returns</h5>\n<p>A new <a href=\"svsm/locking/rwlock/type.RWLock.html\" title=\"type svsm::locking::rwlock::RWLock\"><code>RWLock</code></a> instance with the specified initial data.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>svsm::locking::RWLock;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>MyData {\n    value: i32,\n}\n\n<span class=\"kw\">let </span>data = MyData { value: <span class=\"number\">42 </span>};\n<span class=\"kw\">let </span>rwlock = RWLock::new(data);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait_for_writers\" class=\"method\"><a class=\"src rightside\" href=\"src/svsm/locking/rwlock.rs.html#189-199\">Source</a><h4 class=\"code-header\">fn <a href=\"svsm/locking/rwlock/struct.RawRWLock.html#tymethod.wait_for_writers\" class=\"fn\">wait_for_writers</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>This function is used to wait until all writers have finished their\noperations and retrieve the current state of the <a href=\"svsm/locking/rwlock/type.RWLock.html\" title=\"type svsm::locking::rwlock::RWLock\"><code>RWLock</code></a>.</p>\n<h5 id=\"returns-1\"><a class=\"doc-anchor\" href=\"#returns-1\">§</a>Returns</h5>\n<p>A 64-bit value representing the current state of the <a href=\"svsm/locking/rwlock/type.RWLock.html\" title=\"type svsm::locking::rwlock::RWLock\"><code>RWLock</code></a>,\nincluding the count of readers and writers.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait_for_readers\" class=\"method\"><a class=\"src rightside\" href=\"src/svsm/locking/rwlock.rs.html#209-219\">Source</a><h4 class=\"code-header\">fn <a href=\"svsm/locking/rwlock/struct.RawRWLock.html#tymethod.wait_for_readers\" class=\"fn\">wait_for_readers</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>This function is used to wait until all readers have finished their\noperations and retrieve the current state of the <a href=\"svsm/locking/rwlock/type.RWLock.html\" title=\"type svsm::locking::rwlock::RWLock\"><code>RWLock</code></a>.</p>\n<h5 id=\"returns-2\"><a class=\"doc-anchor\" href=\"#returns-2\">§</a>Returns</h5>\n<p>A 64-bit value representing the current state of the <a href=\"svsm/locking/rwlock/type.RWLock.html\" title=\"type svsm::locking::rwlock::RWLock\"><code>RWLock</code></a>,\nincluding the count of readers and writers.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lock_write\" class=\"method\"><a class=\"src rightside\" href=\"src/svsm/locking/rwlock.rs.html#227-257\">Source</a><h4 class=\"code-header\">pub fn <a href=\"svsm/locking/rwlock/struct.RawRWLock.html#tymethod.lock_write\" class=\"fn\">lock_write</a>(&amp;self) -&gt; <a class=\"struct\" href=\"svsm/locking/rwlock/struct.RawWriteLockGuard.html\" title=\"struct svsm::locking::rwlock::RawWriteLockGuard\">RawWriteLockGuard</a>&lt;'_, T, I&gt;</h4></section></summary><div class=\"docblock\"><p>This function ensures exclusive access for a single writer and waits\nfor all readers to finish before granting access to the writer.</p>\n<h5 id=\"returns-3\"><a class=\"doc-anchor\" href=\"#returns-3\">§</a>Returns</h5>\n<p>A <a href=\"svsm/locking/rwlock/type.WriteLockGuard.html\" title=\"type svsm::locking::rwlock::WriteLockGuard\"><code>WriteLockGuard</code></a> that provides write access to the protected data.</p>\n</div></details></div></details>",0,"svsm::locking::rwlock::RWLock","svsm::locking::rwlock::RWLockIrqSafe","svsm::locking::rwlock::RWLockAnyTpr"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RawRWLock%3CT,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/svsm/locking/rwlock.rs.html#264-295\">Source</a><a href=\"#impl-RawRWLock%3CT,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>, I: <a class=\"trait\" href=\"svsm/locking/common/trait.IrqLocking.html\" title=\"trait svsm::locking::common::IrqLocking\">IrqLocking</a>&gt; <a class=\"struct\" href=\"svsm/locking/rwlock/struct.RawRWLock.html\" title=\"struct svsm::locking::rwlock::RawRWLock\">RawRWLock</a>&lt;T, I&gt;</h3><div class=\"docblock\"><p>A lock can only be acquired for read access if its inner type implements\n<code>Sync</code> as well as <code>Send</code>.  This is because a read lock can be acquired\nsimultaneously by multiple threads, and therefore the data must be\nshareable.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lock_read\" class=\"method\"><a class=\"src rightside\" href=\"src/svsm/locking/rwlock.rs.html#270-294\">Source</a><h4 class=\"code-header\">pub fn <a href=\"svsm/locking/rwlock/struct.RawRWLock.html#tymethod.lock_read\" class=\"fn\">lock_read</a>(&amp;self) -&gt; <a class=\"struct\" href=\"svsm/locking/rwlock/struct.RawReadLockGuard.html\" title=\"struct svsm::locking::rwlock::RawReadLockGuard\">RawReadLockGuard</a>&lt;'_, T, I&gt;</h4></section></summary><div class=\"docblock\"><p>This function allows multiple readers to access the data concurrently.</p>\n<h5 id=\"returns\"><a class=\"doc-anchor\" href=\"#returns\">§</a>Returns</h5>\n<p>A <a href=\"svsm/locking/rwlock/type.ReadLockGuard.html\" title=\"type svsm::locking::rwlock::ReadLockGuard\"><code>ReadLockGuard</code></a> that provides read access to the protected data.</p>\n</div></details></div></details>",0,"svsm::locking::rwlock::RWLock","svsm::locking::rwlock::RWLockIrqSafe","svsm::locking::rwlock::RWLockAnyTpr"],["<section id=\"impl-Send-for-RawRWLock%3CT,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/svsm/locking/rwlock.rs.html#104\">Source</a><a href=\"#impl-Send-for-RawRWLock%3CT,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"svsm/locking/rwlock/struct.RawRWLock.html\" title=\"struct svsm::locking::rwlock::RawRWLock\">RawRWLock</a>&lt;T, I&gt;</h3></section>","Send","svsm::locking::rwlock::RWLock","svsm::locking::rwlock::RWLockIrqSafe","svsm::locking::rwlock::RWLockAnyTpr"],["<section id=\"impl-Sync-for-RawRWLock%3CT,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/svsm/locking/rwlock.rs.html#106\">Source</a><a href=\"#impl-Sync-for-RawRWLock%3CT,+I%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"svsm/locking/rwlock/struct.RawRWLock.html\" title=\"struct svsm::locking::rwlock::RawRWLock\">RawRWLock</a>&lt;T, I&gt;</h3></section>","Sync","svsm::locking::rwlock::RWLock","svsm::locking::rwlock::RWLockIrqSafe","svsm::locking::rwlock::RWLockAnyTpr"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[11779]}