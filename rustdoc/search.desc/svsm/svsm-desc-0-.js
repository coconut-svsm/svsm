searchState.loadedDescShard("svsm", 0, "Obtain bit for a given position\nObtain bit mask for the given positions\nSVSM kernel crypto API\nEnable shadow stacks.\nHigh level error typing for the public SVSM APIs.\n<code>SNP_GUEST_REQUEST</code> mechanism to communicate with the PSP\nThis crate defines the Virtual TPM interfaces and shows …\nInformation about an ACPI CPU\nACPI table, both header and contents\nACPI Table Buffer A buffer containing ACPI tables. …\nHigher level representation of the raw ACPI table header\nACPI Table Metadata Metadata associated with an ACPI, …\nACPI Root System Description Pointer (RSDP) used by ACPI …\nRaw header of an ACPI table. It corresponds to the …\nHeader of an entry within MADT\nEntry for a local APIC within MADT\nEntry for a local X2APIC within MADT\nRetrieve an ACPI table by its signature.\nRetrieve an ACPI table from a specified offset within the …\nThe APIC ID for the CPU\nRaw binary content of ACPI table\nChecksum to add to all other bytes\nChecksum for data integrity\nID for compiler\nRevision of compiler used to create the table\nGet the content of the ACPI table.\nGet a pointer to the content of the ACPI table at a …\nIndicates whether the CPU is enabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an RSPDesc instance from FwCfg\nCreate a new <code>ACPITableBuffer</code> instance from a firmware …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLength of the table\nLoads ACPI CPU information by parsing the ACPI tables. It …\nLoads ACPI CPU information by parsing the ACPI tables …\nLoad ACPI tables and their metadata from the ACPI Root …\nCreate a new <code>ACPITableHeader</code> from a raw <code>RawACPITableHeader</code>.\nCreate a new <code>ACPITable</code> from raw binary data.\nCreate a new <code>ACPITableMeta</code> instance.\nOEM-supplied string\nOEM-supplied string to identify OEM\nOEM-supplied version number\nOEM-supplied string to identify tables\nThe offset of the table within the table buffer\nPrint a human-readable summary of the ACPI table header’…\nRevision of the ACPI\nRevision (signature field)\nPhysical address of the RSDT\nSignature must contain “RSD PTR”\nSignature specificies the type of ACPI table\n4-character signature of the table\nGet the signature of the ACPI table.\nCollection of metadata for ACPI tables, including …\nConverts the <code>VirtAddr</code> to a reference to the given type, …\nConverts the <code>VirtAddr</code> to a reference to the given type, …\nTransform the address into its inner representation for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the index into page-table pages of given levels.\nConverts the <code>VirtAddr</code> to a slice of a given type\nError generating AES key.\nError deserializing the attestation response from JSON …\nThe attestation driver that communicates with the proxy …\nPossible errors when attesting TEE evidence.\nUnable to generate secure channel key.\nGuest has failed attestation.\nError deserializing the negotiation response from JSON …\nError serializing the negotiation request to JSON bytes.\nError reading from the attestation proxy transport channel.\nError writing over the attestation proxy transport channel.\nAttestation successful, but no public key found.\nAttestation successful, but unable to decrypt secret.\nAttestation successful, but no secret found.\nUnable to fetch SEV-SNP attestation report.\nUnsupported TEE architecture.\nUnable to allocate memory for Vec.\nAttest SVSM’s launch state by communicating with the …\nSend an attestation request to the proxy. Proxy should …\nDecrypt a secret from the attestation server with the TEE …\nHash negotiation parameters and fetch TEE evidence.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash the negotiation parameters from the attestation …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSend a negotiation request to the proxy. Proxy should …\nRead attestation data from the serial port.\nGenerate a key used to establish a secure channel between …\nWrite attestation data over the serial port.\nGeneric error for all read and write operations on a block …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrites all bytes from the slice to the console\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits: 14..15\nAttempts to deliver the specified IRQ into the specified …\nBits: 12..13\nBits: 32..64\nBits: 11..12\nBits: 18..20\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from bits.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into bits.\nReturns <code>true</code> if the specified APIC ID matches the given …\nBits: 8..11\nCreates a new default initialized bitfield.\nReads an APIC register, returning its value, or an error …\nBits: 16..18\nBits: 13..14\nBits: 20..32\nSends an IPI using the specified ICR.\nSends an IPI using the APIC logical destination mode. …\nSend an IPI using the APIC physical destination mode. …\nBits: 14..15\nBits: 12..13\nBits: 32..64\nBits: 11..12\nBits: 18..20\nBits: 8..11\nBits: 16..18\nBits: 13..14\nBits: 20..32\nBits: 15..16\nBits: 0..8\nBits: 15..16\nBits: 0..8\nBits: 14..15\nBits: 12..13\nBits: 32..64\nBits: 11..12\nBits: 18..20\nBits: 8..11\nBits: 16..18\nBits: 13..14\nBits: 20..32\nBits: 15..16\nBits: 0..8\nWrites a value to the specified APIC register. Returns an …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSafety\nSafety\nSafety\nCopy a CPUID page’s content to memory pointed to by a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a set of CPUs, based on CPU index, which …\nRepresents a set of CPUs, based on CPU index.  A maximum …\nAdds a CPU to the set.\nAdds a CPU to the set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProduces an iterator to iterate over the set.\nProduces an iterator to iterate over the set.  This …\nRemoves a CPU from the set.\nRemoves a CPU from the set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes this GDT the active GDT.\nLoads all selectors from the current GDT.\nPage fault error code flags.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLoad an IDT.\nMake the IDT read-only. This is supposed to be used for …\nSafety\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSafety\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSafety\nSafety\nSafety\nThe count of CPUs that have not yet requested blocking of …\nSafety\nSafety\nThis module implements inter-processor interrupt support, …\nCopies the result of the unicast IPI back into the …\nAll IPI messages must be copied into a shared IPI buffer …\nAll IPI messages must be copied into a shared IPI buffer …\nIf an IPI message has any atomic members, then they may be …\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvokes the IPI handler for the message.\nIndicates whether use of IPIs is currently available.\nCount the startup of another AP for IPI blocking purposes.\nSafety\nSends an IPI message to multiple CPUs.\nSends an IPI message to a single CPU.  Because only a …\nRequest IPI blocking on the current CPU and wait until all …\nInterrupt flag in RFLAGS register\nAnd IRQ guard which saves the current IRQ state and …\nThis structure keeps track of PerCpu IRQ states. It tracks …\nA TPR guard which raises TPR upon creation.  When the …\nReturns the current nesting count\nDepth of IRQ-disabled nesting.  Index 0 specifies the …\nIncrease IRQ-disable nesting level by 1. The method will …\nThis struct should never be dropped. Add a debug check in …\nDecrease IRQ-disable nesting level by 1. The method will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuery IRQ state on current CPU\nQuery IRQ state on current CPU\nDecrements TPR.\nCreate a new instance of <code>IrqState</code>\nMake the type !Send + !Sync\nMake the type !Send + !Sync\nMake the type !Send + !Sync\nDecrease IRQ-disable nesting level by 1. The method will …\nIncrease IRQ-disable nesting level by 1. The method will …\nIncrements TPR.\nQuery IRQ state on current CPU\nUnconditionally disable IRQs\nUnconditionally enable IRQs\nUnconditionally set TPR.\nChanges whether interrupts will be enabled when the …\nIRQ state when count was <code>0</code>\nConverts an interrupt vector to a TPR value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCopy <code>size</code> bytes from <code>src</code> to <code>dst</code>.\nSet <code>size</code> bytes at <code>dst</code> to <code>val</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nCPU-local data.\nCreates a new default <code>PerCpu</code> struct, allocates it via the …\nAllocates and initializes a new VMSA for this CPU. Returns …\nAllocates hypercall input/output pages for this CPU.\nAPIC access object\nSafety\nGets the GHCB for this CPU.\nStack boundaries of the currently running task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the <code>X86Apic</code> object for this cpu.\nSafety\nCallers are expected to specify a valid CPU index.\nFill in the initial context structure for the SVSM.\nGHCB page for this CPU.\nReturns a shared reference to the local APIC, or <code>None</code> if …\nLocal APIC state for APIC emulation if enabled\nReturns a mutable reference to the local APIC, or <code>None</code> if …\n<code>#HV</code> doorbell page for this CPU.\nGets a pointer to the location of the HV doorbell pointer …\nHypercall input/output pages for this CPU if running under …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nGet IRQ-disable nesting count on the current CPU\nGet IRQ-disable nesting count on the current CPU\nPerCpu IRQ state tracking\nDisables IRQs on the current CPU. Keeps track of the …\nDisables IRQs on the current CPU. Keeps track of the …\nReduces IRQ-disable nesting level on the current CPU and …\nReduces IRQ-disable nesting level on the current CPU and …\nReduces IRQ-disable nesting level on the current CPU …\nIncrements IRQ-disable nesting level on the current CPU …\nLowers TPR from the current level to the new level …\nLowers TPR from the current level to the new level …\nCreates a new default <code>PerCpu</code> struct.\nCreate a new virtual memory mapping in the PerCpu VMR\nAdd the PerCpu virtual range into the provided pagetable\nRaises TPR on the current CPU.  Keeps track of the nesting …\nRaises TPR on the current CPU.  Keeps track of the nesting …\nRegisters an already set up GHCB page for this CPU.\nTask list that has been assigned for scheduling on this CPU\nSafety\nSets up the CPU-local GHCB page.\nReference to the <code>PerCpuShared</code> that is valid in the global, …\nPerCpu Virtual Memory Range\nAddress allocator for per-cpu 2m temporary mappings\nAddress allocator for per-cpu 4k temporary mappings\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA shadow stack to be used during context switches.\nA shadow stack to be used for exception handling (either …\nThe initial shadow stack used by a CPU.\nA shadow stack to be used during normal execution of a …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns whether shadow stacks are supported by the CPU and …\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe address of the first instruction that will be executed …\nThe address of the function that’s executed when the …\nSafety\nSafety\nIndicates that all addresses must be flushed on all …\nIndicates that all addresses must be flushed on all …\nDefines the scope of a TLB flush.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles a read from the SVSM-specific MSR defined the in …\nHandles a runtime #VC exception.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandles a #VC exception in stage 2 using GHCB features, …\nHandles a #VC exception in stage 2 before the GHCB is set …\nEnd-of-Interrupt register MSR offset\nInterrupt-Control-Register register MSR offset\nLocal APIC ID register MSR offset\nInterrupt-Service-Register base MSR offset\nSELF-IPI register MSR offset (x2APIC only)\nSpurious-Interrupt-Register MSR offset\nAPIC Base MSR\nEnables the X86 local APIC in X2APIC mode by writing to …\nSend an EOI message\nCheck whether a given IRQ vector is currently being …\nInitialize the APIC  by setting an accessor object. This …\nSends an IPI specified by the X86 ICR value.\nRead value from APIC offset\nGet the MSR offset relative to a bitmap base MSR and the …\nEnables software IRQs in the X86 local APIC by setting the …\nWrite a value to an APIC offset\nChecks whether an IRQ vector is currently in service\nEnables to APIC in X2APIC mode.\nEOI Method - defaults to writing to APIC.EOI register\nSends an EOI message\nReturns the argument unchanged.\nICR access method - defaults to writing to the APIC.ICR …\nWrites the APIC ICR register\nGet APIC ID\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>X86Apic</code>\nReturns the ApicAccess object.\nInitialize the ApicAccessor - Must be called before …\nSet Spurious-Interrupt-Vector Register\nEnable the APIC-Software-Enable bit.\nUpdates the APIC_BASE MSR by reading the current value, …\nClears RFLAGS.AC to enable SMAP. This is currently only …\nSets RFLAGS.AC to disable SMAP. This is currently only …\nX2APIC Base MSR\nEnd-of-Interrupt register MSR offset\nInterrupt-Control-Register register MSR offset\nInterrupt-Service-Register base MSR offset\nSELF-IPI register MSR offset\nSpurious-Interrupt-Register MSR offset\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAPI for authentication encryption with associated data\nAPI for message digests.\nRustCrypto implementation\nAuthenticated tag size (128 bits)\nAes256Gcm type\nAES-256 GCM\nInitialization vector size (96 bits)\nKey size\nDecrypt the provided buffer using AES-256 GCM\nEncrypt the provided buffer using AES-256 GCM\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSha512 type\nDigests <code>input</code> into an output vector of size <code>OUTPUT_LEN</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors related to ACPI parsing.\nErrors related to the memory allocator\nGeneric errors related to APIC emulation.\nErrors related to APIC handling.  These may originate from …\nErrors related to Attestation handling. These may …\nGeneric errors related to attestation handling.\nErrors related to block devices.\nErrors related to console operation\nAn error arising because APIC emulation is disabled.\nErrors during ELF parsing and loading.\nAn error related to APIC emulation.\nA fault occurred\nErrors from the filesystem.\nErrors related to firmware parsing\nErrors related to firmware configuration contents\nErrors related to GHCB\nErrors related to MSR protocol\nErrors related to Hyper-V.\nInstruction decode related errors\nInvalid address, usually provided by the guest\nError reported when convert a usize to Bytes\nError reported when converting to UTF-8\nAn error related to attestation manifest.\nGeneric errors related to memory management\nError reported when there is no CAA (Calling Area Address) …\nError reported when there is no secrets page set up.\nError reported when there is no VMSA set up.\nThe operation is not supported.\nObj related error\nErrors related to platform initialization.\nAn error related to APIC registration.\nAn error related to attestation report.\nErrors related to SEV-SNP operations, like PVALIDATE or …\nA generic error during SVSM operation.\nTask management errors,\nErrors related to TDX operations\nErrors related to attesting SVSM’s launch evidence.\nErrors from #VC handler\nErrors related to Virtio drivers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a directory entry which could either be a file …\nRepresents directory operations\nDirectory entries including their names.\nRepresents file operations\nRepresents a handle used for file operations in a …\nRepresents the type of error occurred while doing SVSM …\nStruct to add a <code>Buffer</code> interface to a mutable <code>&amp;[u8]</code> slice\nStruct to add a <code>Buffer</code> interface to a non-mutable <code>&amp;[u8]</code> …\nCreate a file with the given path from the file-system …\nUsed to create a file and the missing subdirectories in …\nUsed to create a subdirectory in the directory.\nUsed to create a new file in the directory.\nCreate a file with the given path from a given root …\nLooks for a directory entry using a relative path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed to initialize the filesystem with an empty root …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to get the list of entries in the directory.\nUsed to list the contents of a directory.\nUsed to lookup for an entry in the directory.\nGet reference to backing pages of the file\nCreate a directory with the given path relative to the …\nCreate a directory with the given path relative to a given …\nOpen a file to get the file handle for further file …\nOpen a file to get the file handle for reading.\nOpen a file to get the file handle for further file …\nOpen a file to get the file handle for reading and writing.\nOpen a file to get the file handle for writing.\nUsed to open a directory object.\nUsed to create a SVSM RAM filesystem from a filesystem …\nReturn position of file read/write pointer.\nPrepare the directory for removal.\nUsed to read from a file handle.\nUsed to read contents of a file\nCopy data from the buffer into a slice\nRead contents of a file into a <code>Buffer</code>\nRemoves a directory relative to file-system root.\nRemoves a directory\nSet the file offset to an absolute position.\nSet the file offset relative to end-of-file\nSet the file offset relative to the current offset\nUsed to get the size of the file.\nTotal number of bytes represented by this buffer.\nTruncate file at a given offset.\nUsed to truncate the file to the specified size.\nUnlink a file from its parent directory.\nUsed to remove an entry from the directory.\nUnlink a file from its parent directory.\nUsed to write into file handle.\nUsed to write contents to a file\nWrite to file from a <code>Buffer</code>\nCopy data from a slice into the Buffer\nRepresents a directory entry which could either be a file …\nRepresents directory operations\nDirectory entries including their names.\nRepresents file operations\nRepresents the type of error occurred while doing SVSM …\nUsed to create a subdirectory in the directory.\nUsed to create a new file in the directory.\nUsed to define methods of <code>FsError</code>.\nUsed to check if a <code>DirEntry</code> variable is a directory.\nUsed to check if a <code>DirEntry</code> variable is a file.\nUsed to get the list of entries in the directory.\nUsed to lookup for an entry in the directory.\nGet reference to backing pages of the file\nCreate a new <code>DirectoryEntry</code> instance.\nPrepare the directory for removal.\nUsed to read contents of a file\nRead contents of a file into a <code>Buffer</code>\nUsed to get the size of the file.\nUsed to truncate the file to the specified size.\nUsed to remove an entry from the directory.\nUsed to write contents to a file\nWrite to file from a <code>Buffer</code>\nStruct to add a <code>Buffer</code> interface to a mutable <code>&amp;[u8]</code> slice\nStruct to add a <code>Buffer</code> interface to a non-mutable <code>&amp;[u8]</code> …\nCopy data from the buffer into a slice\nTotal number of bytes represented by this buffer.\nCopy data from a slice into the Buffer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a handle used for file operations in a …\nRepresents a raw file handle.\nRepresents SVSM filesystem\nCreate a file with the given path from the file-system …\nUsed to create a file and the missing subdirectories in …\nCreate a file with the given path from a given root …\ncurrent file offset for the read/write operation\nLooks for a directory entry using a relative path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed to set the root directory of the SVSM filesystem.\nUsed to initialize the filesystem with an empty root …\nUsed to check if the filesystem is initialized.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to list the contents of a directory.\nCreate a directory with the given path relative to the …\nCreate a directory with the given path relative to a given …\nCreate a new file handle instance.\nOpen a file to get the file handle for further file …\nOpen a file to get the file handle for reading.\nOpen a file to get the file handle for further file …\nOpen a file to get the file handle for reading and writing.\nOpen a file to get the file handle for writing.\nUsed to open a directory object.\nReturn position of file read/write pointer.\nUsed to read from a file handle.\nUsed to read contents from the file handle.\nTrue when file is open for reading\nRead contents from the file to a <code>Buffer</code>.\nCheck whether FileHandle is open for reading.\nRemoves a directory relative to file-system root.\nRemoves a directory\nUsed to get the root directory of the filesystem.\nSet the file offset to an absolute position.\nChange the current file offset to an absolute position.\nSet the file offset relative to end-of-file\nSet the current file offset relative to the end of file.\nSet the file offset relative to the current offset\nChange the current file offset relative to the current …\nUsed to get the size of the file.\nUsed to get an iterator over all the directory and file …\nUsed to get an iterator over all the directory and file …\nTruncate file at a given offset.\nUsed to truncate the file to the specified size.\nUnlink a file from its parent directory.\nUnlink a file from its parent directory.\nUsed to perform a walk over the items in a path while …\nUsed to perform a walk over the items in a path while …\nUsed to perform a walk over the items in a path while …\nCheck whether FileHandle is open for writing.\nUsed to write into file handle.\nUsed to write contents to the file handle\nTrue when file is open for writing\nWrite data to the file via a <code>Buffer</code>.\nUsed to create a SVSM RAM filesystem from a filesystem …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a SVSM directory with synchronized access\nRepresents a SVSM file with synchronized access\nRepresents an SVSM Ramfile\nMaximum size of the file without allocating new pages\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed to check if an entry is present in the directory.\nUsed to increase the capacity of the file by allocating a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to get new instance of <code>RawRamFile</code>.\nUsed to get a new instance of <code>RamFile</code>.\nUsed to get a new instance of <code>RamDirectory</code>\nUsed to get a new instance of <code>RamDirectory</code>\nVector of pages allocated for the file\nUsed to read the file from a particular offset.\nRead data from a file page and store it in a Buffer object.\nUsed to set the capacity of the file.\nUsed to get the size of the file in bytes.\nCurrent size of the file\nUsed to truncate the file to a given size.\nUsed to write to the file at a particular offset.\nWrite data from <code>Buffer</code> object to a file page.\nInvalid Data format\nThe firmware provided too many files to the guest\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry reading an instance of T from the iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDriver to send <code>SNP_GUEST_REQUEST</code> commands to the PSP. It …\nMessage that carries an encrypted <code>SNP_GUEST_REQUEST</code> …\n<code>SNP_GUEST_REQUEST</code> command to request an attestation report.\nAPI to send <code>SNP_GUEST_REQUEST</code> commands to the PSP\nGlobal <code>SNP_GUEST_REQUEST</code> driver instance\nHypervisor busy, try again\nBuffer provided is too small\nClass of the <code>SNP_GUEST_REQUEST</code> command: Regular or Extended\n<code>SNP_GUEST_REQUEST</code> driver\nExtended data buffer that will be provided to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize the global <code>SnpGuestRequestDriver</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>SnpGuestRequestDriver</code>\nShared page used for the <code>SNP_GUEST_REQUEST</code> request\nShared page used for the <code>SNP_GUEST_REQUEST</code> response\nCall the GHCB layer to send the encrypted …\nSend the provided extended <code>SNP_GUEST_REQUEST</code> command to …\nSend the provided extended <code>SNP_GUEST_REQUEST</code> command to …\nSend the provided regular <code>SNP_GUEST_REQUEST</code> command to the …\nSend the provided regular <code>SNP_GUEST_REQUEST</code> command to the …\nSend the provided VMPL0 <code>SNP_GUEST_REQUEST</code> command to the …\nIncrease the VMPCK0 sequence number by two. In order to …\nGet the last VMPCK0 sequence number accounted\nSet the user_extdata_size to <code>n</code> and clear the first <code>n</code> bytes …\nEncrypted page where we perform crypto operations\nExtended data size (<code>certs</code> size) provided by the user in …\nEach <code>SNP_GUEST_REQUEST</code> message contains a sequence number …\nVersion of the message header\nMessage header size\nMessage payload size\nVersion of the message payload\nMaximum buffer size that the hypervisor takes to store the …\nAEAD Algorithm Encodings (AMD SEV-SNP spec. table 99)\nData page(s) the hypervisor will use to store certificate …\n<code>SNP_GUEST_REQUEST</code> message format\n<code>SNP_GUEST_REQUEST</code> message header format (AMD SEV-SNP spec. …\nMessage Type Encodings (AMD SEV-SNP spec. table 100)\nThe AEAD used to encrypt this message\nMessage authentication tag\nBuild the initialization vector for AES-256 GCM\nDecrypt the <code>SNP_GUEST_REQUEST</code> command stored in the …\ndefault() method implementation. We can’t derive Default …\nEncrypt the provided <code>SNP_GUEST_REQUEST</code> command and store …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a slice of the header fields used as additional …\nThe size of the message header in bytes\nThe version of the message header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe sequence number for this message\nThe size of the payload in bytes\nThe type of the payload\nThe version of the payload\nThe ID of the VMPCK used to protect this message\nAllocate a new <code>SnpGuestRequestMsgHdr</code> and initialize it\nReserve. Must be zero.\nReserved. Must be zero.\nReserved. Must be zero.\nSet the authenticated tag\nValidate the <code>SnpGuestRequestMsgHdr</code> fields\nATTESTATION_REPORT format (AMD SEV-SNP spec. table 21)\nFormat for an ECDSA P-384 with SHA-384 signature (AMD …\nMSG_REPORT_REQ payload format (AMD SEV-SNP spec. table 20)\nMSG_REPORT_RSP payload format (AMD SEV-SNP spec. table 23)\nSupported values for SnpReportResponse.status\nThe <code>TCB_VERSION</code> contains the security version numbers of …\nSize of the <code>SnpReportRequest.user_data</code>\n<code>zerocopy</code> needs to expose the type of the last field when …\nReserved\nSHA-384 digest of the Author public key that certified the …\nIf <code>MaskChipId</code> is set to 0, Identifier unique to the chip as\nThe family ID provided at launch\n31:2 - Reserved 1:0 - KEY_SEL. Selects which key to use …\nFlags\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe guest SVN\nData provided by the hypervisor at launch\nSHA-384 digest of the ID public key that signed the ID …\nThe image ID provided at launch\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the reserved field is clear\nThe measurement calculated at launch\nConstructor. Properly sets reserved bits to 0.\nInformation about the platform\nCurrentTcb\nThe guest policy\nR component of this signature\nVersion of the Microcode, SNP firmware, PSP and boot loader\nThe attestation report generated by firmware\nGuest-provided data\nReport ID of this guest\nReport ID of this guest’s migration agent\nSize in bytes of the report\nReport TCB version used to derive the VCEK that signed …\nReserved\nReserved, must be zero\nReserved\nReserved and some more flags\nReserved, must be zero\nS component of this signature\nSignature of bytes 0h to 29Fh inclusive of this report\nThe signature algorithm used to sign this report\nThe status of the key derivation operation, see …\nTake a slice and return a reference for Self\nGuest-provided data to be included in the attestation …\nValidate the SnpReportResponse fields\nVersion number of this attestation report\nThe VMPL to put in the attestation report\nThe request VMPL for the attestation report\nRequest an extended VMPL0 attestation report to the PSP.\nRequest a regular VMPL0 attestation report to the PSP.\nBits: 4..5\nBits: 0..4\nBits: 16..32\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from bits.\nConvert from bits.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into bits.\nConvert into bits.\nCreates a new default initialized bitfield.\nCreates a new default initialized bitfield.\nBits: 4..5\nBits: 0..4\nBits: 16..32\nBits: 0..4\nBits: 4..5\nBits: 0..4\nBits: 4..5\nBits: 4..5\nBits: 0..4\nBits: 16..32\nBits: 0..4\nBits: 4..5\nDead code is allowed because the hypercall input logic …\nA wrapper type to reinterpret an input hypercall page as a …\nA wrapper type to reinterpret an output hypercall page as …\nAn raw, owned page in shared memory used for Hyper-V …\nA guard that holds an exclusive borrow of the Hyper-V …\nBits: 0..16\nBits: 32..44\nBits: 32..44\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from bits.\nConvert from bits.\nCasts a hypercall input page into a header of type <code>H</code> and …\nCasts a hypercall output page into a slice of repeated …\nDivides a hypercall input page into a header of type <code>H</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into bits.\nConvert into bits.\nBits: 16..17\nBits: 31..32\nSafety\nCreates a new <code>HypercallPagesGuard</code> structure to describe a …\nCreates a new default initialized bitfield.\nCreates a new default initialized bitfield.\nBits: 0..16\nBits: 32..44\nBits: 32..44\nBits: 16..17\nBits: 31..32\nBits: 48..60\nBits: 0..16\nBits: 17..26\nBits: 48..60\nBits: 0..16\nAttempts to allocate a new shared hypercall page.\nGets the virtual address of the shared page.\nBits: 17..26\nBits: 0..16\nBits: 32..44\nBits: 32..44\nBits: 16..17\nBits: 31..32\nBits: 48..60\nBits: 0..16\nBits: 17..26\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError while decoding the displacement bytes.\nError while decoding the immediate bytes.\nError while decoding the Mem-Offset bytes.\nError while decoding the ModR/M byte.\nError while decoding the OpCode bytes.\nError while decoding the prefix bytes.\nError while decoding the SIB byte.\nRepresents the context of a decoded instruction, which is …\nError due to alignment check exception.\nError due to general protection exception.\nError due to page fault exception.\nError due to stack segment exception.\nError while handling MMIO read operation.\nError while handling MMIO write operation.\nAn immediate value in an instruction\nAn error that can occur during instruction decoding.\nThis trait provides the necessary context for an …\nTrait representing a machine memory for instruction …\nError while peeking an instruction byte.\nA view of an x86 instruction.\nThe instruction decoding is not invalid.\nInvalid RegCode for decoding Register.\nError while handling input IO operation.\nError while handling output IO operation.\nError while mapping linear addresses.\nError while reading from memory.\nError while writing to memory.\nNo OpCodeDesc generated while decoding.\nAn operand in an instruction, which might be a register or …\nA register in an instruction\nA Segment register in instruction\nError while translating linear address.\nThe decoded instruction is not supported.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a memory-mapped I/O read operation.\nHandle a memory-mapped I/O write operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandle an I/O in operation.\nHandle an I/O out operation.\nCheck IO permission bitmap.\nMap the given linear address region to a machine memory …\nRead data from the memory at the specified offset.\nWrite data to the memory at the specified offset.\nRead the current privilege level\nRead CR0 register\nRead CR4 register\nRead EFER register\nRead rflags register\nRead a register\nRead a code segment register\nTranslate the given linear address to a physical address.\nWrite a register\nRepresents the context of a decoded instruction, which is …\nRepresents the raw bytes of an instruction and tracks the …\nThis trait provides the necessary context for an …\nTrait representing a machine memory for instruction …\nThe instruction bytes specifically for OpCode decoding\nIncreases the count by one after a peeked byte being …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRaw instruction bytes\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEmulates the decoded instruction using the provided …\nEmulates IOIO instructions using the provided machine …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nHandle a memory-mapped I/O read operation.\nHandle a memory-mapped I/O write operation.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRetrieves the decoded instruction, if available.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandle an I/O in operation.\nHandle an I/O out operation.\nCheck IO permission bitmap.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nMap the given linear address region to a machine memory …\nRead data from the memory at the specified offset.\nWrite data to the memory at the specified offset.\nCreates a new <code>OpCodeBytes</code> instance with the provided …\nConstructs a new <code>DecodedInsnCtx</code> by decoding the given …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNumber of instruction bytes being processed\nRetrieves a single unprocessed instruction byte.\nRetrieves the number of processed instruction bytes.\nRead the current privilege level\nRead CR0 register\nRead CR4 register\nRead EFER register\nRead rflags register\nRead a register\nRead a code segment register\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nRetrieves the length of the decoded instruction in bytes.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTranslate the given linear address to a physical address.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWrite a register\nAn immediate value in an instruction\nA view of an x86 instruction.\nAn operand in an instruction, which might be a register or …\nA register in an instruction\nA Segment register in instruction\nDecode the instruction with the given InsnMachineCtx.\nRepresents the classification of opcodes into distinct …\nDescriptor for an opcode, which contains the raw …\nDefines a set of flags for opcode attributes. These flags …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe type of the opcode\nThe opcode value\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDecodes an opcode from the given <code>OpCodeBytes</code>.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe flags for fully decoding the instruction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGeneric Read trait to be implemented over any transport …\nGeneric Write trait to be implemented over any transport …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplements the state handling methods for locks that …\nAbstracts TPR and interrupt state handling when taking and …\nImplements the IRQ state handling methods as no-ops. Locks …\nImplements the state handling methods for locks that raise …\nIrqGuard to keep track of IRQ state. IrqGuard implements …\nTprGuard to keep track of IRQ state. TprGuard implements …\nAssociated helper function to modify TPR/interrupt state …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake type explicitly !Send + !Sync\nMake type explicitly !Send + !Sync\nA simple Read-Write Lock (RWLock) that allows multiple …\nA guard that provides read access to the data protected by …\nA guard that provides exclusive write access to the data …\nIRQ state before and after critical section\nIRQ state before and after critical section\nIRQ state before and after critical section\nIRQ state before and after critical section\nIRQ state before and after critical section\nIRQ state before and after critical section\nIRQ state before and after critical section\nIRQ state before and after critical section\nComposes a 64-bit value by combining the number of readers …\nReference to the protected data\nReference to the protected data\nReference to the protected data\nReference to the protected data (mutable)\nReference to the protected data (mutable)\nReference to the protected data (mutable)\nAn UnsafeCell for interior mutability\nAn UnsafeCell for interior mutability\nAn UnsafeCell for interior mutability\nAn UnsafeCell for interior mutability\nReference to the protected data\nReference to the protected data (mutable)\nAn UnsafeCell for interior mutability\nAllow reading the protected data through deref\nRelease the read lock\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis function allows multiple readers to access the data …\nThis function ensures exclusive access for a single writer …\nCreates a new <code>RWLock</code> instance with the provided initial …\nSilence unused type warning\nSilence unused type warning\nSilence unused type warning\nSilence unused type warning\nSilence unused type warning\nReference to the associated <code>AtomicU64</code> in the <code>RWLock</code>\nReference to the associated <code>AtomicU64</code> in the <code>RWLock</code>\nReference to the associated <code>AtomicU64</code> in the <code>RWLock</code>\nReference to the associated <code>AtomicU64</code> in the <code>RWLock</code>\nReference to the associated <code>AtomicU64</code> in the <code>RWLock</code>\nReference to the associated <code>AtomicU64</code> in the <code>RWLock</code>\nAn atomic 64-bit integer used for synchronization\nAn atomic 64-bit integer used for synchronization\nAn atomic 64-bit integer used for synchronization\nAn atomic 64-bit integer used for synchronization\nReference to the associated <code>AtomicU64</code> in the <code>RWLock</code>\nReference to the associated <code>AtomicU64</code> in the <code>RWLock</code>\nAn atomic 64-bit integer used for synchronization\nSplits a 64-bit value into two parts: readers (low 32 …\nThis function is used to wait until all readers have …\nThis function is used to wait until all writers have …\nA lock guard obtained from a <code>SpinLock</code>. This lock guard …\nA simple ticket-spinlock implementation for protecting …\nThis atomic counter is incremented each time a thread …\nThis atomic counter is incremented each time a thread …\nThis atomic counter is incremented each time a thread …\nThis atomic counter is incremented each time a thread …\nThis atomic counter is incremented each time a thread …\nThis <code>UnsafeCell</code> is used to provide interior mutability of …\nThis <code>UnsafeCell</code> is used to provide interior mutability of …\nThis <code>UnsafeCell</code> is used to provide interior mutability of …\nThis <code>UnsafeCell</code> is used to provide interior mutability of …\nThis <code>UnsafeCell</code> is used to provide interior mutability of …\nProvides read-only access to the protected data\nProvides mutable access to the protected data\nAutomatically releases the lock when the guard is dropped\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis counter represents the thread that currently holds …\nThis counter represents the thread that currently holds …\nThis counter represents the thread that currently holds …\nThis counter represents the thread that currently holds …\nThis counter represents the thread that currently holds …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAcquires the lock, providing access to the protected data.\nExecute function F while holding the lock.\nCreates a new SpinLock instance with the specified initial …\nUse generic type I in the struct without consuming space.\nUse generic type I in the struct without consuming space.\nUse generic type I in the struct without consuming space.\nUse generic type I in the struct without consuming space.\nUse generic type I in the struct without consuming space.\nThis method tries to acquire the lock without blocking. If …\nAn abstraction, similar to a <code>Box</code>, for types that need to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPagesize definitions\nPerCPU mappings level 3 index\nTask mappings level 3 index\nPage table self-map level 3 index\nLevel3 page-table index shared between all CPUs\nSize helpers\nMore size helpers\nShadow stack address to use during context switches\nStack address to use during context switches\nBase Address of shared memory region\nShared mappings region start\nShared mappings region end\nMapping address for Hyper-V hypercall page.\nBase Address of shared memory region\nPerCPU CAA mappings\nEnd Address of per-cpu memory region\nRegion for PerCPU Stacks\nBase Address for temporary mappings - used by page-table …\nStart and End for PAGE_SIZEed temporary mappings\nStart and End for PAGE_SIZEed temporary mappings\nPerCPU VMSA mappings\nBase address of task memory region\nEnd address of task memory region\nShadow stack address of the per-cpu init task\nDoubleFault ISST shadow stack base address\nIST Stacks base address\nDoubleFault IST stack base address\nPerCPU XSave Context area base address\nEnd of user memory address range\nStart of user memory address range\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents possible errors that can occur during memory …\nStruct representing information about an allocated memory …\nStruct representing information about a compound memory …\nStruct representing information about a file memory page.\nStruct representing information about a free memory page.\nThe file page has an invalid virtual address.\nThe heap address is invalid.\nThe specified size causes an error when creating the …\nThe specified page order is invalid.\nThe provided page type is invalid.\nThe page frame number (PFN) is invalid.\nMaximum order of page allocations (up to 128kb)\nRepresents info about allocated and free pages in …\nMemory region with its physical/virtual addresses, page …\nOut of memory error.\nEnum representing different types of page information.\nRepresents a reference to a memory page, holding both …\nStorage type of a memory page, including encoding and …\nEnum representing the type of a memory page.\nStatic spinlock-protected instance of <code>MemoryRegion</code> …\nStruct representing information about a reserved memory …\nStatic spinlock-protected instance of <code>SlabPageSlab</code> …\nRepresents a slab allocator for fixed-size objects.\nRepresents common information shared among multiple slab …\nRepresents a slab memory page, used for efficient …\nStruct representing information about a slab memory page.\nRepresents a slab page for the <code>SlabPageSlab</code> allocator.\nRepresents a simple virtual-to-physical memory allocator (…\nAdd other <code>SlabPage</code>.\nAllocates memory based on the specified layout.\nAllocates a slot in the slab.\nAllocate a file page.\nAllocates a file page with initial reference count.\nAllocates a single memory page from the root memory region.\nAllocates a single page.\nAllocates multiple memory pages with a specified order …\nAllocates pages with a specific order.\nAllocates pages with a specific order and page information.\nAllocates a specific page frame number (<code>pfn</code>) within a …\nAllocate a slab page.\nAllocates a slab page.\nAllocate other slot, caller must make sure there’s at …\nAllocate a zeroed page.\nAllocates a zeroed page.\nChecks if a page frame number is valid.\nClones the <code>PageRef</code> instance, obtaining a new reference to …\nFinds the neighboring page frame number for a compound …\nWrite to page from <code>Buffer</code> object\nRead from page to <code>Buffer</code> object\nDeallocates memory based on the specified pointer and …\nDeallocates a slab page, freeing the associated memory.\nFree an allocation from this Slab\nDeallocates memory from a Slab.\nDeallocate a slot given its virtual address\nDecodes a <code>FreeInfo</code> into a <code>PageStorageType</code>.\nDecodes a <code>PageStorageType</code> into an <code>AllocatedInfo</code>.\nDecodes a <code>PageStorageType</code> into a <code>SlabPageInfo</code>.\nDecodes a <code>PageStorageType</code> into a <code>CompoundInfo</code>.\nDecodes a <code>PageStorageType</code> into a <code>ReservedInfo</code>.\nDecodes a <code>PageStorageType</code> into a <code>FileInfo</code>.\nDecodes the index of the next page.\nDecodes the order of the page.\nDecodes the reference count.\nDecodes the slab\nFree the memory (destroy) the <code>SlabPage</code>\nDrops the <code>PageRef</code> instance, decreasing the reference count …\nEncodes the <code>FreeInfo</code> into a <code>PageStorageType</code>.\nEncodes the <code>AllocatedInfo</code> into a <code>PageStorageType</code>.\nEncodes the <code>SlabPageInfo</code> into a <code>PageStorageType</code>.\nEncodes the <code>CompoundInfo</code> into a <code>PageStorageType</code>.\nEncodes the <code>ReservedInfo</code> into a <code>PageStorageType</code>.\nEncodes the <code>FileInfo</code> into a <code>PageStorageType</code>.\nEncodes the index of the next page.\nEncodes the order of the page.\nEncodes the reference count.\nEncodes the virtual address of the slab\nFinds an unused slab page and removes it from the slab.\nFree the page at the given virtual address.\nFrees a page based on its virtual address, determining the …\nFrees a page of a specific order. If merging is …\nFrees a raw page by updating the free list and marking it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>PageStorageType</code> into <code>PageInfo</code>.\nGet the capacity of the <code>SlabPage</code>\nGets a file page and increments its reference count.\nGets the next available page frame number for a given …\nGet the virtual address of the next <code>SlabPage</code>\nCalculates the order of a given size for page allocation.\nGets the page frame number for a given virtual address. …\nGets the virtual offset of a virtual address within the …\nGrows the slab by allocating a new slab page.\nInitialize the <code>SlabPage</code>.\nInitialize the <code>SlabCommon</code> with default values\nInitializes the <code>SlabPageSlab</code>, allocating the first slab …\nInitialize the <code>Slab</code> instance\nInitializes a compound page with given page frame numbers …\nInitializes memory by marking certain pages as reserved …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarks a compound page and updates page information for …\nRetrieve information about the root memory\nRetrieves information about memory, including total and …\nMerges two pages of the same order into a new compound …\nCreates a new <code>PageStorageType</code> with the specified page type.\nCreates a new <code>FileInfo</code> with the specified reference count.\nCreates a new <code>MemoryRegion</code> with default values.\nAllocate a reference-counted file page.\nCreates a new <code>SlabPage</code> instance with default values.\nCreates a new <code>SlabPageSlab</code> with a default <code>SlabCommon</code>.\nCreates a new instance of <code>SvsmAllocator</code> with initialized …\nGets the next free page frame number from the free list.\nIndex of the next free page.\nOrder of the free page.\nGets a mutable pointer to the page information for a given …\nGets a pointer to the page information for a given page …\nRetrieves the page type from the <code>PageStorageType</code>.\nReturns the physical address of the memory page.\nConverts a physical address within this memory region to a …\nPrints memory information based on the provided <code>MemInfo</code> …\nReleases a file page and decrements its reference count.\nReads page information for a given page frame number.\nReference count of the file page.\nRefills the free page list for a given order.\nInitializes the root memory region with the specified …\nShrinks the slab by freeing unused slab pages.\nSplits a page into two pages of the next lower order.\nConverts <code>PageInfo</code> into a <code>PageStorageType</code>.\nAttempts to merge a given page with its neighboring page. …\nReturns the virtual address of the memory page.\nConverts a virtual address to a physical address within …\nWrites page information for a given page frame number.\nRequest the virtual start address of the global mapping.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize global allocatable virtual address ranges.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap physical addresses into the global shared address …\nCreate a private mapping using of physical addresses into …\nCreate a shared mapping using of physical addresses into …\nCreate a private mapping using of physical addresses into …\nCreate a shared mapping using of physical addresses into …\nCreate a <code>GlobalRangeGuard</code> with the given parameters.\nRequest the mapped region as a <code>MemoryRegion</code>.\nRequest the length in bytes of the global mapping.\nCopies <code>size</code> number of bytes from <code>src</code> to <code>dst</code>, catching any …\nReads a slice of bytes from a physical address region …\nReads a slice of bytes from a physical address region …\nWrites a slice of bytes to a physical address region …\nCopies <code>src</code> to <code>dst</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nSafety\nReads a vector of bytes from a physical address region …\nReads a null-terminated C string from the user space. …\nReads an instance of T from a physical address region …\nRead one word from a virtual address.\nRead one dword from a virtual address.\nRead one qword from a virtual address.\nRead one byte from a virtual address.\nSafety\nSafety\nWrites a value to a physical address region outside of …\nWrites one byte at a virtual address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ending address of the ISA range.\nThe starting address of the ISA range.\nGlobal memory map containing various memory regions.\nInitializes the global memory map based on the provided …\nReturns <code>true</code> if the provided physical address <code>paddr</code> is …\nReturns <code>true</code> if the provided physical region <code>region</code> is …\nReturns <code>true</code> if the provided physical address <code>paddr</code> is …\nSharedBox is a safe wrapper around memory pages shared …\nReturns the virtual address of the memory.\nFill up the <code>outbuf</code> slice provided with bytes from data\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLeak the memory.\nMakes a virtual page private by updating the page tables, …\nMakes a virtual page shared by revoking its validation, …\nClear the first <code>n</code> elements.\nRead the currently stored value into <code>out</code>.\nAllocate some memory and share it with the host.\nShare <code>value</code> with the host.\nAn abstraction, similar to a <code>Box</code>, for types that need to …\nTransforms a <code>PageBox&lt;MaybeUninit&lt;T&gt;&gt;</code> into a <code>PageBox&lt;T&gt;</code>.\nTransforms a [<code>PageBox&lt;[MaybeUninit&lt;T&gt;]&gt;</code>] into a […\nCheck the size requrements for a type to be allocated …\nCreate a <code>PageBox</code> from a previous allocation of the same …\nGets the page order required for an allocation to hold a <code>T</code>…\nConsumes and leaks the <code>PageBox</code>, returning a mutable …\nAllocates enough pages to hold a <code>T</code>, initializing them with …\nAllocates a dynamically-sized slice of <code>len</code> items of type <code>T</code>…\nAllocates enough pages to hold a <code>T</code>, but does not …\nAllocates a dynamically-sized slice of <code>len</code> uninitialized …\nAllocates enough pages to hold a <code>T</code>, and zeroes them out.\nReturns the virtual address of this allocation.\nNumber of entries in a page table (4KB/8B).\nFeature mask for page table entry flags.\nPhysical address for the Launch VMSA (Virtual Machine …\nMaximum physical address supported by the system.\nMapping levels of page table entries.\nFlags to represent how memory is accessed, e.g. write data …\nMaximum physical address bits supported by the system.\nMask for private page table entry.\nRepresents a page table entry.\nA pagetable page with multiple entries.\nAttributes to determin Whether a memory access …\nA physical address within a page frame\nPage table structure containing a root page with multiple …\nSub-tree of a page table that can be populated at the …\nRepresents paging mode.\nRepresents a sub-tree of a page-table which can be mapped …\nMask for shared page table entry.\nGet the address from the page table entry, excluding the …\nGet the address from the page frame, excluding the …\nReturns the physical address of this page table part.\nRequest physical base address of the page-table sub-tree. …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nAllocates a zeroed pagetable page and returns a mutable …\nAllocates a 2MB page table entry for a given virtual …\nAllocates a 2MB page table entry for a given virtual …\nAllocates a 4KB page table entry for a given virtual …\nAllocates a 4KB page table entry for a given virtual …\nAllocate a new page table root.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChecks the access rights for a page table entry.\nGets the physical address for a mapped <code>vaddr</code> or <code>None</code> if no …\nClear the page table entry.\nClone the shared part of the page table; excluding the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCopy an entry <code>entry</code> from another <code>PageTable</code>.\nGet the CR3 register value for the current page table.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSplits a 2MB page into 4KB pages.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet the flags of the page table entry.\nFrees a pagetable page.\nFrees the resources associated with this page table part.\nFrees a level 1 page table.\nFrees a level 2 page table, including all level 1 tables …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConverts a pagetable entry to a mutable reference to a …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCalculate the virtual address of a PTE in the self-map, …\nCheck if the page table entry is global.\nCheck if the page table entry has reserved bits set.\nCheck if the page table entry is huge.\nThe top-level index this PageTablePart is populated at\nComputes the index within a page table at the given level …\nRequest PageTable index to populate this instance to\nInitializes the encrypt mask.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nCheck if the page table entry is clear (null).\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLoad the current page table into the CR3 register.\nSet address as private via mask.\nMakes the memory region pages read-only. This method is …\nSet address as shared via mask.\nMaps a 2MB page.\nMaps a 2MB page.\nMap a 2MiB page in the page table sub-tree\nMaps a 4KB page.\nMaps a 4KB page.\nMap a 4KiB page in the page table sub-tree\nMaps a memory region to physical memory with specified …\nMaps a region of memory using 2MB pages.\nMaps a region of memory using 4KB pages.\nReturns the exclusive end of the physical address space.\nCreate a new PageTablePart and allocate a root page for …\nCreates a new <code>PTWalkAttr</code> instance with the specified …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCheck if the page table entry is NX (no-execute).\nGet the address from the page table entry, including the …\nGet the address from the page frame, including the shared …\nInitializes paging settings.\nRetrieves the physical address of a mapping.\nPopulates this paghe table with the contents of the given …\nCheck if the page table entry is present.\nReturns the private encrypt mask value.\nGet the raw bits (<code>u64</code>) of the page table entry.\nThe root of the page-table sub-tree\nRead a page table entry from the specified virtual address.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the page table entry with the specified address and …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the encryption state for a 4KB page.\nSets the shared state for a 4KB page.\nReturns the shared encrypt mask value.\nSplits a page into 4KB pages if it is part of a larger …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the supported flags considering the feature mask.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnmaps a 2MB page.\nUnmaps a 2MB page.\nUnmaps a 2MiB page from the page table sub-tree\nUnmaps a 4KB page.\nUnmaps a 4KB page.\nUnmaps a 4KiB page from the page table sub-tree\nUnmaps the virtual memory region <code>vregion</code>.\nUnmaps a region <code>vregion</code> of 2MB pages. The region must be …\nUnmaps a region of memory using 4KB pages.\nCheck if the page table entry is user-accessible.\nPerform a virtual to physical translation using the …\nWalk the virtual address and return the corresponding …\nWalks the page table at level 3 to find the mapping for a …\nWalks a page table at level 0 to find a mapping.\nWalks a page table at level 1 to find a mapping.\nWalks a page table at level 2 to find a mapping.\nWalks the page table to find a mapping for a given virtual …\nCheck if the page table entry is writable.\nDescribes a per-CPU mapping of type <code>T</code>.  This object has a …\nGuard for a per-CPU page mapping to ensure adequate …\nCreates a new <code>PerCPUPageMappingGuard</code> for the specified …\nCreates a new mapping of type <code>T</code> to the specified physical …\nCreates a new <code>PerCPUPageMappingGuard</code> for a 4KB page at the …\nCreates a virtual contigous mapping for the given 4k …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the virtual address associated with the guard.\nMakes a memory region read-only.\nMakes the .ro_after_init section read-only (cf. svsm.lds …\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the allocation was made from the huge (2M) …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a virtual memory region in the 2M virtual range.\nReturns a virtual memory region in the 4K virtual range.\nReturns the virtual memory region that this allocation …\nContains base functionality for all <code>VirtualMapping</code> types …\nMap view of a ramfs file into virtual memory\nMapping to be used as a kernel stack. This maps a stack …\nA single mapping of virtual memory in a virtual memory …\nMap physically contiguous memory\nVirtual Memory Region\nGranularity of ranges mapped by [<code>struct VMR</code>]. The mapped …\nReserve a region of address space so that no other mapping …\nVirtual mapping backed by allocated pages. This can be …\nAllocation for stack pages\n<code>RawAllocMapping</code> used for memory allocation\nPhysical base address to map\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nNumber of pages required in <code>pages</code>\nEnd address of this range as virtual PFN (VirtAddr &gt;&gt; …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe flags to apply to the virtual mapping\nPage-table flags to map pages\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nNumber of guard pages to reserve address space for\nHandle a page fault that occurred on a virtual memory …\nIndicates whether the mapping has any associated data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLink for storing this instance in an RBTree\nRequest physical address to map for a given offset\nPointer to the actual mapping It is protected by an RWLock …\nRequest the size of the virtual memory mapping\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nRequest the page size used for mappings\nA vec containing references to mapped pages within the file\nA vec containing references to PageFile allocations\nIndicates that this [<code>struct VMR</code>] is visible only on a …\n[<code>struct PageTableParts</code>] needed to map this VMR into a …\nRequest the PTEntryFlags used for this virtual memory …\n<code>PTEntryFlags</code> global to all mappings in this region. This …\nThe virtual memory range covered by this mapping It is …\n<code>True</code> for shadow stacks\nRequest whether the mapping is shared or private. Defaults …\nThe size of the mapping in bytes\nNumber of bytes to map\nSize in bytes to reserve. Must be aligned to PAGE_SIZE\nStart address of this range as virtual PFN (VirtAddr &gt;&gt; …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRBTree containing all [<code>struct VMM</code>] instances with valid …\nInform the virtual memory mapping about an offset being …\nWhether mapping is writable\nA single mapping of virtual memory in a virtual memory …\nInformation required to resolve a page fault within a …\nThe flags to use to map the virtual memory page.\nReturns the argument unchanged.\nHandle a page fault that occurred on a virtual memory …\nIndicates whether the mapping has any associated data.\nCalls <code>U::from(self)</code>.\nLink for storing this instance in an RBTree\nRequest physical address to map for a given offset\nPointer to the actual mapping It is protected by an RWLock …\nRequest the size of the virtual memory mapping\nCreate a new VMM instance with at a given address and …\nThe physical address of a page that must be mapped to the …\nRequest the page size used for mappings\nRequest the PTEntryFlags used for this virtual memory …\nRequest the mapped range\nThe virtual memory range covered by this mapping It is …\nRequest the mapped range as page frame numbers\nRequest whether the mapping is shared or private. Defaults …\nInform the virtual memory mapping about an offset being …\nRead-only access to the file\nMap view of a ramfs file into virtual memory\nGet a flags value with all known bits set.\nGet the underlying bits value.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe flags to apply to the virtual mapping\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreate a new [‘VMFileMapping’] for a file. The file …\nA vec containing references to mapped pages within the file\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe size of the mapping in bytes\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMapping to be used as a kernel stack. This maps a stack …\nAllocation for stack pages\nReturns the stack bounds of this kernel stack\nNumber of guard pages to reserve address space for\nCreate a new <code>VMKernelStack</code> with the default size. This …\nCreate a new <code>VMKernelStack</code> with the default size, packed …\nCreate a new <code>VMKernelStack</code> with one page in size for use …\nCreate a new <code>VMKernelStack</code> with a given size. This …\n<code>True</code> for shadow stacks\nGet a reference to the shadow stack page. This is required …\nReturns the virtual address for the top of this kernel …\nMap physically contiguous memory\nPhysical base address to map\nInitialize new instance of <code>VMPhysMem</code>\nInitialize new <code>Mapping</code> with <code>VMPhysMem</code>\nNumber of bytes to map\nWhether mapping is writable\nContains base functionality for all <code>VirtualMapping</code> types …\nAllocates a single backing page of type PageFile if the …\nAllocates a full set of backing pages of type PageFile\nNumber of pages required in <code>pages</code>\nRequest physical address to map for a given offset\nRequest size of the mapping in bytes\nCreates a new instance of RawAllocMapping\nReturns a reference to a page at a given index. The page …\nA vec containing references to PageFile allocations\nCheck if a page has been allocated\nUnmap call-back - currently nothing to do in this function\nReserve a region of address space so that no other mapping …\nCreate new instance of VMReserved\nCreate new <code>Mapping</code> of <code>VMReserved</code>\nSize in bytes to reserve. Must be aligned to PAGE_SIZE\nVirtual mapping backed by allocated pages. This can be …\n<code>RawAllocMapping</code> used for memory allocation\nPage-table flags to map pages\nCreate a new instance and allocate backing memory\nCreate a new <code>Mapping</code> of <code>VMalloc</code> and allocate backing memory\nVirtual Memory Region\nGranularity of ranges mapped by [<code>struct VMR</code>]. The mapped …\nAllocated all <code>PageTablePart</code>s needed to map this region\nDump all <code>VMM</code> mappings in the RBTree. This function is …\nEnd address of this range as virtual PFN (VirtAddr &gt;&gt; …\nNotify the range that a page fault has occurred. This …\nInitialize this <code>VMR</code> by calling <code>VMR::initialize_common</code> with …\nInitialize this <code>VMR</code> by checking the <code>start</code> and <code>end</code> values …\nInitialize this <code>VMR</code> by calling <code>VMR::initialize_common</code> with …\nInserts <code>VMM</code> into the virtual memory region. It searches …\nInserts <code>VMM</code> with the specified alignment. This method …\nInserts <code>VMM</code> at a specified virtual base address. This …\nInserts <code>VMM</code> into the virtual memory region. This method …\nMap a <code>VMM</code> into the <code>PageTablePart</code>s of this region\nCreates a new [<code>struct VMR</code>]\nIndicates that this [<code>struct VMR</code>] is visible only on a …\n[<code>struct PageTableParts</code>] needed to map this VMR into a …\nPopulate <code>PageTablePart</code>s of the <code>VMR</code> into a page-table\n<code>PTEntryFlags</code> global to all mappings in this region. This …\nRemoves the mapping from a given base address from the …\nMarks a [<code>struct VMR</code>] as being associated with only a …\nStart address of this range as virtual PFN (VirtAddr &gt;&gt; …\nRBTree containing all [<code>struct VMM</code>] instances with valid …\nUnmap a <code>VMM</code> from the <code>PageTablePart</code>s of this region\nReturns the virtual start and end addresses for this region\nThis defines a platform abstraction to permit the SVSM to …\nGet the features and the capabilities of the platform.\nChanges the state of APIC registration on this system, …\nConfigures the use of alternate injection as requested.\nObtain CPUID using platform-specific tables.\nDetermine whether shadow stacks are supported.\nPerforms basic early initialization of the runtime …\nPerforms initialization of the platform runtime …\nPerforms initialiation of the environment specfic to the …\nPerforms a system-wide TLB flush.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nObtains a reference to an I/O port implemetation …\nDetermines the paging encryption masks for the current …\nHalts the system as required by the platform.\nPerform a hypercall.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether a given interrupt vector was invoked as …\nLaunches guest boot firmware.\nPerfrom a read from a memory-mapped IO area\nPerfrom a write to a memory-mapped IO area\nPerforms a page state change between private and shared …\nPerforms the necessary preparations for launching guest …\nQueries the state of APIC registration on this system.\nEstablishes state required for guest/host communication.\nEnable platform-specific Hyper-V hypercall operations.\nCompletes initialization of a per-CPU object during …\nCompletes initialization of a per-CPU object on the target …\nStart an additional processor.\nIndicates whether this platform should invoke the SVSM …\nDetermines whether the platform supports interrupts to the …\nMarks a physical range of pages as valid or invalid for …\nMarks a virtual range of pages as valid or invalid for use …\nWrite a host-owned MSR.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nPerform a read from a memory-mapped IO area\nPerform a write to a memory-mapped IO area\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerfrom a read from a memory-mapped IO area\nPerfrom a write to a memory-mapped IO area\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nAttest protocol implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nvTPM protocol implementation (SVSM spec, chapter 8).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the guid\nReturns the manifest buffer gpa and size Checks if gpa is …\nReturns the manifest buffer gpa and size Checks if gpa is …\nReturns the nonce\nReturns the nonce\nReturns the report buffer gpa and size Checks if gpa is …\nReturns the report buffer gpa and size Checks if gpa is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if reserved fields are all set to zero\nChecks if reserved fields are all set to zero\nReturns how many bytes the wire ABI representation takes.\nTake a slice and return a reference for Self\nTake a slice and return a reference for Self\nper-cpu request mapping area size (1GB)\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nvTPM platform commands (SVSM spec, section 8.1 - …\nTPM_SEND_COMMAND request structure (SVSM spec, table 16)\nTPM_SEND_COMMAND response structure (SVSM spec, table 17)\nMSSIM platform command ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInput buffer that contains the TPM command\nSize of the input buffer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocality usage for the vTPM is not defined yet (must be …\nOutput buffer that will hold the command response\nSize of the output buffer\nWrite the response to the outbuf\nSend a TpmSendCommandRequest to the vTPM\nThe SVSM Calling Area (CAA)\nIndicates whether the <code>call_pending</code> flag is set.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a copy of the this CAA with the <code>call_pending</code> field …\nReturns a copy of the this CAA with the <code>no_eoi_required</code> …\nA CAA with all of its fields set to zero.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerfrom a read from a memory-mapped IO area\nPerfrom a write to a memory-mapped IO area\nPerform an MSR read via a GHCB call an return a <code>u64</code> value.\nPerform an MSR read via a GHCB call\nAllocates a new HV doorbell page and registers it on the …\nGets the HV doorbell page configured for this CPU.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from bits.\nConvert from bits.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into bits.\nConvert into bits.\nBits: 27..28\nBits: 10..11\nBits: 1..2\nBits: 9..10\nBits: 14..15\nCreates a new default initialized bitfield.\nCreates a new default initialized bitfield.\nBits: 0..1\nBits: 8..9\nBits: 7..8\nBits: 0..8\nSafety\nThis function must always be called with interrupts …\nBits: 11..14\nBits: 15..27\nBits: 28..31\nBits: 2..7\nBits: 27..28\nBits: 10..11\nBits: 1..2\nBits: 9..10\nBits: 14..15\nBits: 0..1\nBits: 8..9\nBits: 7..8\nBits: 0..8\nBits: 11..14\nBits: 15..27\nBits: 28..31\nBits: 2..7\nBits: 31..32\nBits: 31..32\nBits: 27..28\nBits: 10..11\nBits: 1..2\nBits: 9..10\nBits: 14..15\nBits: 0..1\nBits: 8..9\nBits: 7..8\nBits: 0..8\nBits: 11..14\nBits: 15..27\nBits: 28..31\nBits: 2..7\nBits: 31..32\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSafety\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSafety\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSafety\nCheck that we support the hypervisor’s advertised GHCB …\nCopy secrets page’s content pointed by a <code>VirtAddr</code>\nCopy a secrets page’s content to memory pointed by a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe desired state of the page passed to PVALIDATE.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSafety\nSafety\nSafety\nVMGEXIT operations generally need to be performed with …\nExecutes the vmmcall instruction.\nThe intersection of a source flags value with the …\nSafety\nSafety\nSafety\nSafety\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the dr7 register to the given value\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAn allocated page containing a VMSA structure.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLeaks the allocation for this VMSA, ensuring it never gets …\nAllocates a new VMSA for the given VPML.\nReturns the physical address for this VMSA.\nReturns the virtual address fro this VMSA.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn object represents the type of resource like file, VM, …\nObjHandle is a unique identifier for an object in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn object represents the type of resource like file, VM, …\nObjHandle is a unique identifier for an object in the …\nAdd an object to the current process and assigns it an …\nCloses an object identified by its ObjHandle.\nRetrieves an object by its ObjHandle.\nA RunQueue implementation that uses an RBTree to …\nTask kernel stack mapping\nTask shadow stack mapping\nCreates and initializes the kernel state of a new user …\nPointer to currently running task\nTerminates the current task.\nLoads and executes an ELF binary in user-mode.\nFinished user-space task creation by putting the task on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the task\nIdle task - runs when there is no other runnable task\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck to see if the task scheduled on the current …\nLink to global task list\nTask memory management state\nUser-visible name of task\nObjects shared among threads within the same process\nPage table that is loaded when the task is scheduled\nRoot directory for this task\nLinked list with runable tasks\nLink to scheduler run queue\nState relevant for scheduler\nRound-Robin scheduler implementation for COCONUT-SVSM\nPerform a task switch and hand the CPU over to the next …\nInitializes the RunQueue on the current CPU. It will …\nPointer to a task that is requesting an affinity change to …\nCreates, initializes and starts a new kernel task. Note …\nCreates, initializes and starts a new kernel thread of the …\nTemporary storage for tasks which are about to be …\nPointer to a task that should be woken when returning from …\nXSave area\nLoads and executes an ELF binary in user-mode.\nReturns the name of the binary file without preceeding …\nThe location of a cpu-local shadow stack restore token that…\nA RunQueue implementation that uses an RBTree to …\nGlobal task list This contains every task regardless of …\nCreates and initializes the kernel state of a new user …\nGets a pointer to the current task\nPointer to currently running task\nTerminates the current task.\nFinished user-space task creation by putting the task on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFind the next task to run, which is either the task at the …\nUpdate state before a task is scheduled out. Non-idle …\nIdle task - runs when there is no other runnable task\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck to see if the task scheduled on the current …\nCreate a new runqueue for an id. The id would normally be …\nLinked list with runable tasks\nPerform a task switch and hand the CPU over to the next …\nInitializes the RunQueue on the current CPU. It will …\nInitialized the scheduler for this (RunQueue)RunQueue. …\nPrepares a task switch. The function checks if a task …\nPointer to a task that is requesting an affinity change to …\nSets the idle task for this RunQueue. This function sets a …\nCreates, initializes and starts a new kernel task. Note …\nCreates, initializes and starts a new kernel thread of the …\nSafety\nTemporary storage for tasks which are about to be …\nWakes a task from idle if required.\nPointer to a task that should be woken when returning from …\nGuard a per-task kernel mapping and unmap it when going …\nVirtual address region that has been allocated for this …\nCreates and initializes a new <code>TaskMM</code> structure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks whether the task has a user-mode <code>[VMR]</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a reference to the <code>[VMR]</code> for the per-task kernel …\nPointer the struct <code>[TaskMM]</code> which contains the mapping.\nInsert a given <code>[Mapping]</code> into the kernel address part of …\nReturn an otional reference to the <code>[VMR]</code> for the per-task …\nVirtual address of the mapping.\nGet the virtual address the guarded mapping starts at.\nTask virtual memory range for use at CPL 0\nTask virtual memory range for use at CPL 3 - None for …\nThis trait is used to describe a type that can be used as …\nTask kernel stack mapping\nTask shadow stack mapping\nAdds an object to the current task.\nAdds an object to the current task and maps it to a given …\nCPU this task is currently assigned to\nCreate a new thread for an existing task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nRetrieves an object from the current task.\nID of the task\nWhether this is an idle task\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLink to global task list\nTask memory management state\nUser-visible name of task\nSafety\nObjects shared among threads within the same process\nPage table that is loaded when the task is scheduled\nRemoves an object from the current task.\nRoot directory for this task\nSafety\nLink to scheduler run queue\nState relevant for scheduler\nRuns the first time a new task is scheduled, in the …\nCurrent state of the task\nXSave area\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVirtualization exception information\nBits: 0..12\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from bits.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into bits.\nCreates a new default initialized bitfield.\nBits: 12..64\nBits: 0..12\nBits: 12..64\nSafety\nSafety\nSafety\nSafety\nSafety\nBits: 0..12\nBits: 12..64\nLength in byte which represents maximum 8 bytes(u64)\nVMPL level the guest OS will be executed at. Keep VMPL 1 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nA memory location which is effectively immutable after …\nContains the success value\nSafety\nDereference the wrapped value.  Will panic if called on an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize an uninitialized <code>ImmutAfterInitCell</code> instance …\nInitialize an uninitialized <code>ImmutAfterInitCell</code> instance …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtains the inner value of the cell, returning <code>Ok(T)</code> if …\nCreate an unitialized <code>ImmutAfterInitCell</code> instance. The …\nAn abstraction over a memory region, expressed in terms of …\nCreate a new memory region with overflow checks.\nCheck whether an address is within this region.\nCheck whether an address is within this region, treating …\nCheck whether this region fully contains a different …\nChecks whether two regions are contiguous or overlapping. …\nThe end address of the memory region.\nReturns a new memory region with the specified added …\nReturns the argument unchanged.\nCreate a memory region from two raw addresses.\nCalls <code>U::from(self)</code>.\nReturns whether the region spans any actual memory.\nIterate over the addresses covering the memory region in …\nThe length of the memory region in bytes, originally set in\nMerge two regions. It does not check whether the two …\nCreate a new memory region starting at address <code>start</code>, …\nChecks whether two regions overlap. This does <em>not</em> include …\nThe base address of the memory region, originally set in …\n<code>ScopedRef</code> and <code>ScopedMut</code> are designed to solve the problem …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a new <code>ScopedRef</code> from a pointer.\nGenerates a new <code>ScopedMut</code> from a pointer.\nTrusted API to write a value at the pointer. Do not use …\nTrusted API to write a value at the pointer. Do not use …\nSafety\nAllocate a generic Vec of a certain size and copy data …\nAllocate a Vec of a certain size. Alternative to the <code>vec!</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNo valid VirtIO device found the specified address. This …\nThe supplied VirtIO device is not of the extpected type. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllocates and zeroes the given number of contiguous …\nDeallocates the given contiguous physical DMA memory pages.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a physical address used for MMIO to a virtual …\nPerforms memory mapped read from location of <code>src</code>. <code>src</code> …\nPerforms memory mapped write of <code>value</code> to the location of …\nShares the given memory range with the device, and returns …\nUnshares the given memory range from the device and (if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis implements one handler for each <code>TpmPlatformCommand</code> …\nBasic TPM driver services\nBasic services required to perform the VTPM Protocol\nReturns the argument unchanged.\nReturns the cached EK public key if it exists, otherwise …\nGet the list of Platform Commands supported by the TPM …\nPrepare the TPM to be used for the first time. At this …\nCalls <code>U::from(self)</code>.\nCheck if the TPM is powered on.\nSend a command for the TPM to run in a given locality\nIn a system where the NV memory used by the TPM is not …\nPower-on the TPM, which also triggers a reset\nTPM 2.0 Reference Implementation This crate implements the …\nGet the TPM manifest i.e the EK public key by calling the …\nInitialize the TPM by calling the init() implementation of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFunctions required to build the TPM 2.0 Reference …\nSends <code>cmd</code> to <code>vtpm</code> and returns the interpretation of its …\nUses <code>vtpm</code> to create an a primary key on the endorsement …")