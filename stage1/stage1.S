/* SPDX-License-Identifier: MIT OR Apache-2.0 */

/*
 * Copyright (c) 2022-2023 SUSE LLC
 *
 * Author: Joerg Roedel <jroedel@suse.de>
 */

#include "types.h"

/* Use first 640kb of memory for stage2 loader */
#define STAGE2_RANGE_START	0
#define STAGE2_RANGE_PAGES	158

/* Stage2 is loaded at 64kb */
#define STAGE2_START		0x10000

#define STAGE1_STACK		0x10000

.text
	.section ".startup.text","ax"
	.code32

	.org 0
	.globl startup_32
startup_32:
	cld
	cli

	/* Enable caches */
	movl	%cr0, %eax
	andl	$~((1 << 30) | (1 << 29)), %eax
	mov	%eax, %cr0

	/* Setup Stack */
	movl	$STAGE1_STACK, %esp

	/* Store run-offset to %ebp */
	call	2f
2:	popl	%ebp
	leal	2b, %eax
	subl	%eax, %ebp

	leal	stage2_bin(%ebp), %esi
	movl	$STAGE2_START, %edi
	movl	stage2_size(%ebp), %ecx
	shrl	$2, %ecx
	rep movsl

	leal	kernel_elf(%ebp), %edi
	leal	kernel_elf_end(%ebp), %esi

	/* Setup stack for stage 2*/
	movl	$STAGE2_START, %esp

	/* Jump to stage 2 */
	movl	$STAGE2_START, %eax
	jmp	*%eax
.data

	.align	4
stage2_bin:
	.incbin "stage1/stage2.bin"
	.align 4
stage2_bin_end:

kernel_elf:
	.incbin "stage1/kernel.elf"
	.align 4
kernel_elf_end:

stage2_size:
	.long	stage2_bin_end - stage2_bin
